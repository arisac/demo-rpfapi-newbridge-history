{"version":3,"sources":["components/Posts.js","App.js","reportWebVitals.js","index.js"],"names":["Post","post","from_network","from_sub_network","from_chain_id","to_network","to_sub_network","to_chain_id","from_address","from_raw_address","to_address","to_raw_address","from_tx_hash","from_asset_type","from_asset_name","from_asset_symbol","from_asset_address","to_tx_hash","to_asset_type","to_asset_name","to_asset_symbol","to_asset_address","amount_requested","fee","amount_fulfilled","status","Posts","useState","list","posts","setPosts","useEffect","fetch","then","r","json","console","log","map","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAGMA,EAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OAIT,oCACE,8BACE,iDACCA,EAAKC,aAFR,IAEuBD,EAAKE,iBAF5B,IAGE,6CACCF,EAAKG,iBAER,8BACE,+CACCH,EAAKI,WAFR,IAEqBJ,EAAKK,eAF1B,IAGE,6CACCL,EAAKM,eAER,8BACE,iDACCN,EAAKO,aACN,wCACCP,EAAKQ,oBAER,8BACE,+CACCR,EAAKS,WACN,wCACCT,EAAKU,kBAER,8BACE,iDACCV,EAAKW,gBAER,8BACE,+CACCX,EAAKY,gBAFR,MAE4BZ,EAAKa,gBAFjC,IAEmDb,EAAKc,kBAFxD,OAIA,8BACE,uDACCd,EAAKe,sBAER,8BACE,+CACCf,EAAKgB,cAER,8BACE,6CACChB,EAAKiB,cAFR,MAE0BjB,EAAKkB,cAF/B,IAE+ClB,EAAKmB,gBAFpD,OAIA,8BACE,qDACCnB,EAAKoB,oBAER,8BACE,qDACCpB,EAAKqB,iBAFR,IAE2BrB,EAAKc,qBAEhC,8BACE,wCACCd,EAAKsB,IAFR,IAEctB,EAAKc,qBAEnB,8BACE,qDACCd,EAAKuB,iBAFR,IAE2BvB,EAAKmB,mBAEhC,8BACE,2CACCnB,EAAKwB,cAqBCC,EAhBD,WAAO,IAAD,EAEQC,mBAAS,CAACC,KAAK,KAFvB,mBAEXC,EAFW,KAEJC,EAFI,KAYlB,OATAC,qBAAU,WACRC,MA9EU,yHA8EGC,MAAK,SAAAC,GAAC,OAAGA,EAAEC,UAAQF,KAAKH,KACpC,IAGHM,QAAQC,IAAIR,EAAMD,MAIXC,EAAMD,KAAKU,KAAI,SAAArC,GAAI,OAAI,cAAC,EAAD,CAAMA,KAAMA,QC9E7BsC,MANf,WACE,OACI,cAAC,EAAD,KCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8b448e04.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nconst devTo = 'https://rpc1.newchain.newtonproject.org/newbridge/history?newchain_address=0x97549E368AcaFdCAE786BB93D98379f1D1561a29'\n\nconst Post = ({post}) => (\n\n\n  \n    <article>\n      <p>\n        <span>from_network:</span> \n        {post.from_network}({post.from_sub_network}) \n        <span>chain_id:</span> \n        {post.from_chain_id}\n      </p>\n      <p>\n        <span>to_network:</span> \n        {post.to_network}({post.to_sub_network}) \n        <span>chain_id:</span> \n        {post.to_chain_id}\n      </p>\n      <p>\n        <span>from_address:</span> \n        {post.from_address} \n        <span>raw:</span> \n        {post.from_raw_address}\n      </p>\n      <p>\n        <span>to_address:</span> \n        {post.to_address} \n        <span>raw:</span> \n        {post.to_raw_address}\n      </p>\n      <p>\n        <span>from_tx_hash:</span> \n        {post.from_tx_hash}\n      </p>\n      <p>\n        <span>from_asset:</span> \n        {post.from_asset_type} - {post.from_asset_name}({post.from_asset_symbol})\n      </p>\n      <p>\n        <span>from_asset_address:</span> \n        {post.from_asset_address}\n      </p>\n      <p>\n        <span>to_tx_hash:</span> \n        {post.to_tx_hash}\n      </p>\n      <p>\n        <span>to_asset:</span> \n        {post.to_asset_type} - {post.to_asset_name}({post.to_asset_symbol})\n      </p>\n      <p>\n        <span>to_asset_address:</span> \n        {post.to_asset_address}\n      </p>\n      <p>\n        <span>amount_requested:</span> \n        {post.amount_requested} {post.from_asset_symbol}\n      </p>\n      <p>\n        <span>fee:</span> \n        {post.fee} {post.from_asset_symbol}\n      </p>\n      <p>\n        <span>amount_fulfilled:</span> \n        {post.amount_fulfilled} {post.to_asset_symbol}\n      </p>\n      <p>\n        <span>status:</span> \n        {post.status}\n      </p>\n    </article>\n)\n\nconst Posts = () => {\n\n  const [posts, setPosts] = useState({list:[]})\n  useEffect(() => {\n    fetch(devTo).then(r=> r.json()).then(setPosts)\n  }, [])\n\n\n  console.log(posts.list)\n\n  \n  // return null\n  return posts.list.map(post => <Post post={post} />)\n  // Object.entries(obj.topics).map(([k,v])=>\n}\n\nexport default Posts","import React from 'react';\nimport Posts from './components/Posts';\n\nfunction App() {\n  return (\n      <Posts />\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}